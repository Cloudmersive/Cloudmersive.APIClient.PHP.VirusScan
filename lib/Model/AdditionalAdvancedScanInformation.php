<?php
/**
 * AdditionalAdvancedScanInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * virusapi
 *
 * The Cloudmersive Virus Scan API lets you scan files and content for viruses and identify security issues with content.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AdditionalAdvancedScanInformation Class Doc Comment
 *
 * @category Class
 * @description Additional non-threat content verification information
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdditionalAdvancedScanInformation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AdditionalAdvancedScanInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'contains_json' => 'bool',
        'contains_xml' => 'bool',
        'contains_image' => 'bool',
        'relevant_subfile_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'contains_json' => null,
        'contains_xml' => null,
        'contains_image' => null,
        'relevant_subfile_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contains_json' => 'ContainsJSON',
        'contains_xml' => 'ContainsXML',
        'contains_image' => 'ContainsImage',
        'relevant_subfile_name' => 'RelevantSubfileName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contains_json' => 'setContainsJson',
        'contains_xml' => 'setContainsXml',
        'contains_image' => 'setContainsImage',
        'relevant_subfile_name' => 'setRelevantSubfileName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contains_json' => 'getContainsJson',
        'contains_xml' => 'getContainsXml',
        'contains_image' => 'getContainsImage',
        'relevant_subfile_name' => 'getRelevantSubfileName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contains_json'] = isset($data['contains_json']) ? $data['contains_json'] : null;
        $this->container['contains_xml'] = isset($data['contains_xml']) ? $data['contains_xml'] : null;
        $this->container['contains_image'] = isset($data['contains_image']) ? $data['contains_image'] : null;
        $this->container['relevant_subfile_name'] = isset($data['relevant_subfile_name']) ? $data['relevant_subfile_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contains_json
     *
     * @return bool
     */
    public function getContainsJson()
    {
        return $this->container['contains_json'];
    }

    /**
     * Sets contains_json
     *
     * @param bool $contains_json True if the input file contains JSON data, false otherwise; this is not a threat signal
     *
     * @return $this
     */
    public function setContainsJson($contains_json)
    {
        $this->container['contains_json'] = $contains_json;

        return $this;
    }

    /**
     * Gets contains_xml
     *
     * @return bool
     */
    public function getContainsXml()
    {
        return $this->container['contains_xml'];
    }

    /**
     * Sets contains_xml
     *
     * @param bool $contains_xml True if the input file contains XML data, false otherwise; this is not a threat signal
     *
     * @return $this
     */
    public function setContainsXml($contains_xml)
    {
        $this->container['contains_xml'] = $contains_xml;

        return $this;
    }

    /**
     * Gets contains_image
     *
     * @return bool
     */
    public function getContainsImage()
    {
        return $this->container['contains_image'];
    }

    /**
     * Sets contains_image
     *
     * @param bool $contains_image True if the input file contains an image
     *
     * @return $this
     */
    public function setContainsImage($contains_image)
    {
        $this->container['contains_image'] = $contains_image;

        return $this;
    }

    /**
     * Gets relevant_subfile_name
     *
     * @return string
     */
    public function getRelevantSubfileName()
    {
        return $this->container['relevant_subfile_name'];
    }

    /**
     * Sets relevant_subfile_name
     *
     * @param string $relevant_subfile_name Relevant subfile name in an archive format for identified threats, if any
     *
     * @return $this
     */
    public function setRelevantSubfileName($relevant_subfile_name)
    {
        $this->container['relevant_subfile_name'] = $relevant_subfile_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


