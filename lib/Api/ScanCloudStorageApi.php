<?php
/**
 * ScanCloudStorageApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * virusapi
 *
 * The Cloudmersive Virus Scan API lets you scan files and content for viruses and identify security issues with content.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ScanCloudStorageApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ScanCloudStorageApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation scanCloudStorageScanAwsS3File
     *
     * Scan an AWS S3 file for viruses
     *
     * @param  string $access_key AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console (required)
     * @param  string $secret_key AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console (required)
     * @param  string $bucket_region Name of the region of the S3 bucket, such as &#39;US-East-1&#39; (required)
     * @param  string $bucket_name Name of the S3 bucket (required)
     * @param  string $key_name Key name (also called file name) of the file in S3 that you wish to scan for viruses (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CloudStorageVirusScanResult
     */
    public function scanCloudStorageScanAwsS3File($access_key, $secret_key, $bucket_region, $bucket_name, $key_name)
    {
        list($response) = $this->scanCloudStorageScanAwsS3FileWithHttpInfo($access_key, $secret_key, $bucket_region, $bucket_name, $key_name);
        return $response;
    }

    /**
     * Operation scanCloudStorageScanAwsS3FileWithHttpInfo
     *
     * Scan an AWS S3 file for viruses
     *
     * @param  string $access_key AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console (required)
     * @param  string $secret_key AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console (required)
     * @param  string $bucket_region Name of the region of the S3 bucket, such as &#39;US-East-1&#39; (required)
     * @param  string $bucket_name Name of the S3 bucket (required)
     * @param  string $key_name Key name (also called file name) of the file in S3 that you wish to scan for viruses (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CloudStorageVirusScanResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function scanCloudStorageScanAwsS3FileWithHttpInfo($access_key, $secret_key, $bucket_region, $bucket_name, $key_name)
    {
        $returnType = '\Swagger\Client\Model\CloudStorageVirusScanResult';
        $request = $this->scanCloudStorageScanAwsS3FileRequest($access_key, $secret_key, $bucket_region, $bucket_name, $key_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CloudStorageVirusScanResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation scanCloudStorageScanAwsS3FileAsync
     *
     * Scan an AWS S3 file for viruses
     *
     * @param  string $access_key AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console (required)
     * @param  string $secret_key AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console (required)
     * @param  string $bucket_region Name of the region of the S3 bucket, such as &#39;US-East-1&#39; (required)
     * @param  string $bucket_name Name of the S3 bucket (required)
     * @param  string $key_name Key name (also called file name) of the file in S3 that you wish to scan for viruses (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scanCloudStorageScanAwsS3FileAsync($access_key, $secret_key, $bucket_region, $bucket_name, $key_name)
    {
        return $this->scanCloudStorageScanAwsS3FileAsyncWithHttpInfo($access_key, $secret_key, $bucket_region, $bucket_name, $key_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scanCloudStorageScanAwsS3FileAsyncWithHttpInfo
     *
     * Scan an AWS S3 file for viruses
     *
     * @param  string $access_key AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console (required)
     * @param  string $secret_key AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console (required)
     * @param  string $bucket_region Name of the region of the S3 bucket, such as &#39;US-East-1&#39; (required)
     * @param  string $bucket_name Name of the S3 bucket (required)
     * @param  string $key_name Key name (also called file name) of the file in S3 that you wish to scan for viruses (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scanCloudStorageScanAwsS3FileAsyncWithHttpInfo($access_key, $secret_key, $bucket_region, $bucket_name, $key_name)
    {
        $returnType = '\Swagger\Client\Model\CloudStorageVirusScanResult';
        $request = $this->scanCloudStorageScanAwsS3FileRequest($access_key, $secret_key, $bucket_region, $bucket_name, $key_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scanCloudStorageScanAwsS3File'
     *
     * @param  string $access_key AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console (required)
     * @param  string $secret_key AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console (required)
     * @param  string $bucket_region Name of the region of the S3 bucket, such as &#39;US-East-1&#39; (required)
     * @param  string $bucket_name Name of the S3 bucket (required)
     * @param  string $key_name Key name (also called file name) of the file in S3 that you wish to scan for viruses (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function scanCloudStorageScanAwsS3FileRequest($access_key, $secret_key, $bucket_region, $bucket_name, $key_name)
    {
        // verify the required parameter 'access_key' is set
        if ($access_key === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $access_key when calling scanCloudStorageScanAwsS3File'
            );
        }
        // verify the required parameter 'secret_key' is set
        if ($secret_key === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $secret_key when calling scanCloudStorageScanAwsS3File'
            );
        }
        // verify the required parameter 'bucket_region' is set
        if ($bucket_region === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bucket_region when calling scanCloudStorageScanAwsS3File'
            );
        }
        // verify the required parameter 'bucket_name' is set
        if ($bucket_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bucket_name when calling scanCloudStorageScanAwsS3File'
            );
        }
        // verify the required parameter 'key_name' is set
        if ($key_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key_name when calling scanCloudStorageScanAwsS3File'
            );
        }

        $resourcePath = '/virus/scan/cloud-storage/aws-s3/single';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($access_key !== null) {
            $headerParams['accessKey'] = ObjectSerializer::toHeaderValue($access_key);
        }
        // header params
        if ($secret_key !== null) {
            $headerParams['secretKey'] = ObjectSerializer::toHeaderValue($secret_key);
        }
        // header params
        if ($bucket_region !== null) {
            $headerParams['bucketRegion'] = ObjectSerializer::toHeaderValue($bucket_region);
        }
        // header params
        if ($bucket_name !== null) {
            $headerParams['bucketName'] = ObjectSerializer::toHeaderValue($bucket_name);
        }
        // header params
        if ($key_name !== null) {
            $headerParams['keyName'] = ObjectSerializer::toHeaderValue($key_name);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scanCloudStorageScanAzureBlob
     *
     * Scan an Azure Blob for viruses
     *
     * @param  string $connection_string Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal. (required)
     * @param  string $container_name Name of the Blob container within the Azure Blob Storage account (required)
     * @param  string $blob_path Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39; (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CloudStorageVirusScanResult
     */
    public function scanCloudStorageScanAzureBlob($connection_string, $container_name, $blob_path)
    {
        list($response) = $this->scanCloudStorageScanAzureBlobWithHttpInfo($connection_string, $container_name, $blob_path);
        return $response;
    }

    /**
     * Operation scanCloudStorageScanAzureBlobWithHttpInfo
     *
     * Scan an Azure Blob for viruses
     *
     * @param  string $connection_string Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal. (required)
     * @param  string $container_name Name of the Blob container within the Azure Blob Storage account (required)
     * @param  string $blob_path Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39; (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CloudStorageVirusScanResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function scanCloudStorageScanAzureBlobWithHttpInfo($connection_string, $container_name, $blob_path)
    {
        $returnType = '\Swagger\Client\Model\CloudStorageVirusScanResult';
        $request = $this->scanCloudStorageScanAzureBlobRequest($connection_string, $container_name, $blob_path);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CloudStorageVirusScanResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation scanCloudStorageScanAzureBlobAsync
     *
     * Scan an Azure Blob for viruses
     *
     * @param  string $connection_string Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal. (required)
     * @param  string $container_name Name of the Blob container within the Azure Blob Storage account (required)
     * @param  string $blob_path Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scanCloudStorageScanAzureBlobAsync($connection_string, $container_name, $blob_path)
    {
        return $this->scanCloudStorageScanAzureBlobAsyncWithHttpInfo($connection_string, $container_name, $blob_path)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scanCloudStorageScanAzureBlobAsyncWithHttpInfo
     *
     * Scan an Azure Blob for viruses
     *
     * @param  string $connection_string Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal. (required)
     * @param  string $container_name Name of the Blob container within the Azure Blob Storage account (required)
     * @param  string $blob_path Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scanCloudStorageScanAzureBlobAsyncWithHttpInfo($connection_string, $container_name, $blob_path)
    {
        $returnType = '\Swagger\Client\Model\CloudStorageVirusScanResult';
        $request = $this->scanCloudStorageScanAzureBlobRequest($connection_string, $container_name, $blob_path);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scanCloudStorageScanAzureBlob'
     *
     * @param  string $connection_string Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal. (required)
     * @param  string $container_name Name of the Blob container within the Azure Blob Storage account (required)
     * @param  string $blob_path Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function scanCloudStorageScanAzureBlobRequest($connection_string, $container_name, $blob_path)
    {
        // verify the required parameter 'connection_string' is set
        if ($connection_string === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_string when calling scanCloudStorageScanAzureBlob'
            );
        }
        // verify the required parameter 'container_name' is set
        if ($container_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $container_name when calling scanCloudStorageScanAzureBlob'
            );
        }
        // verify the required parameter 'blob_path' is set
        if ($blob_path === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blob_path when calling scanCloudStorageScanAzureBlob'
            );
        }

        $resourcePath = '/virus/scan/cloud-storage/azure-blob/single';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($connection_string !== null) {
            $headerParams['connectionString'] = ObjectSerializer::toHeaderValue($connection_string);
        }
        // header params
        if ($container_name !== null) {
            $headerParams['containerName'] = ObjectSerializer::toHeaderValue($container_name);
        }
        // header params
        if ($blob_path !== null) {
            $headerParams['blobPath'] = ObjectSerializer::toHeaderValue($blob_path);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scanCloudStorageScanGcpStorageFile
     *
     * Scan an Google Cloud Platform (GCP) Storage file for viruses
     *
     * @param  string $bucket_name Name of the bucket in Google Cloud Storage (required)
     * @param  string $object_name Name of the object or file in Google Cloud Storage (required)
     * @param  \SplFileObject $json_credential_file Service Account credential for Google Cloud stored in a JSON file. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CloudStorageVirusScanResult
     */
    public function scanCloudStorageScanGcpStorageFile($bucket_name, $object_name, $json_credential_file)
    {
        list($response) = $this->scanCloudStorageScanGcpStorageFileWithHttpInfo($bucket_name, $object_name, $json_credential_file);
        return $response;
    }

    /**
     * Operation scanCloudStorageScanGcpStorageFileWithHttpInfo
     *
     * Scan an Google Cloud Platform (GCP) Storage file for viruses
     *
     * @param  string $bucket_name Name of the bucket in Google Cloud Storage (required)
     * @param  string $object_name Name of the object or file in Google Cloud Storage (required)
     * @param  \SplFileObject $json_credential_file Service Account credential for Google Cloud stored in a JSON file. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CloudStorageVirusScanResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function scanCloudStorageScanGcpStorageFileWithHttpInfo($bucket_name, $object_name, $json_credential_file)
    {
        $returnType = '\Swagger\Client\Model\CloudStorageVirusScanResult';
        $request = $this->scanCloudStorageScanGcpStorageFileRequest($bucket_name, $object_name, $json_credential_file);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CloudStorageVirusScanResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation scanCloudStorageScanGcpStorageFileAsync
     *
     * Scan an Google Cloud Platform (GCP) Storage file for viruses
     *
     * @param  string $bucket_name Name of the bucket in Google Cloud Storage (required)
     * @param  string $object_name Name of the object or file in Google Cloud Storage (required)
     * @param  \SplFileObject $json_credential_file Service Account credential for Google Cloud stored in a JSON file. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scanCloudStorageScanGcpStorageFileAsync($bucket_name, $object_name, $json_credential_file)
    {
        return $this->scanCloudStorageScanGcpStorageFileAsyncWithHttpInfo($bucket_name, $object_name, $json_credential_file)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scanCloudStorageScanGcpStorageFileAsyncWithHttpInfo
     *
     * Scan an Google Cloud Platform (GCP) Storage file for viruses
     *
     * @param  string $bucket_name Name of the bucket in Google Cloud Storage (required)
     * @param  string $object_name Name of the object or file in Google Cloud Storage (required)
     * @param  \SplFileObject $json_credential_file Service Account credential for Google Cloud stored in a JSON file. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scanCloudStorageScanGcpStorageFileAsyncWithHttpInfo($bucket_name, $object_name, $json_credential_file)
    {
        $returnType = '\Swagger\Client\Model\CloudStorageVirusScanResult';
        $request = $this->scanCloudStorageScanGcpStorageFileRequest($bucket_name, $object_name, $json_credential_file);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scanCloudStorageScanGcpStorageFile'
     *
     * @param  string $bucket_name Name of the bucket in Google Cloud Storage (required)
     * @param  string $object_name Name of the object or file in Google Cloud Storage (required)
     * @param  \SplFileObject $json_credential_file Service Account credential for Google Cloud stored in a JSON file. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function scanCloudStorageScanGcpStorageFileRequest($bucket_name, $object_name, $json_credential_file)
    {
        // verify the required parameter 'bucket_name' is set
        if ($bucket_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bucket_name when calling scanCloudStorageScanGcpStorageFile'
            );
        }
        // verify the required parameter 'object_name' is set
        if ($object_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $object_name when calling scanCloudStorageScanGcpStorageFile'
            );
        }
        // verify the required parameter 'json_credential_file' is set
        if ($json_credential_file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $json_credential_file when calling scanCloudStorageScanGcpStorageFile'
            );
        }

        $resourcePath = '/virus/scan/cloud-storage/gcp-storage/single';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($bucket_name !== null) {
            $headerParams['bucketName'] = ObjectSerializer::toHeaderValue($bucket_name);
        }
        // header params
        if ($object_name !== null) {
            $headerParams['objectName'] = ObjectSerializer::toHeaderValue($object_name);
        }


        // form params
        if ($json_credential_file !== null) {
            $multipart = true;
            $formParams['jsonCredentialFile'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($json_credential_file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Apikey');
        if ($apiKey !== null) {
            $headers['Apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
